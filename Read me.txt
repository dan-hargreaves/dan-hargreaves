Welcome to my chess game! For your ease of uderstanding I have included this explaination of the code.

The code is split into 4 namespaces:
-Game:   Contains classes and methods pertaining to an instance of a chess game including a board, methods for finding if a player has made a
	     valid move, if the player is in check or if the game is over.
-Board:  Contains things relating to a physical chess board, including an array of the pieces on the board, methods for making a move and printing
		 a representation of the board.
-Pieces: Classes relating to the chess pieces. There is an abstract base class, square, with derived classes for each of the pieces plus one for
		 empty squares.  Each piece has a method for returning the squares on the board they can move to.
-Valid:  Contains some functions to validate inputs.

Chess game.cpp has functions for a user interface for the game, allowing the user to start games as well as save them and resume them later.
I have included a preprocessor directive which tests whether the code is being run on windows or no. If so, then windows.h is used to colourise the 
board output. If you can I would recommend running it on windows as it is much more legible.

Notes on coding:
-Namespaces are capitalised e.g. Board.
-All private variables are prefixed with underscore e.g. _location.
-All methods which get an input from the user are prefixed with get_ e.g. get_location().
-When passing a base-class pointer to a piece, I use shared_ptr<unique_ptr<Pieces::square>> (typedef square_ptr). This allows multiple references to the
 piece while allowing the piece to the changed for each instance of the shared_ptr.
-Validation of a user input is always done via an infinite for(;;){} loop with a try catch statement inside. When a good input is given, then there is a break command to exit
 the for loop.


Thank you.

P.S. You can enter 'h' for help at most points in the program.
P.P.S This code compiles and runs on my Windows laptop using Visual Studio 2019.